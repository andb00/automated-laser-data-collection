Vimba GigE Camera Python commands

# Save and load camera settings
def main():
    print_preamble()
    cam_id = parse_args()

    with Vimba.get_instance():
        print("--> Vimba has been started")

        with get_camera(cam_id) as cam:
            print("--> Camera has been opened (%s)" % cam.get_id())

            # Save camera settings to file.
            settings_file = '{}_settings.xml'.format(cam.get_id())
            cam.save_settings(settings_file, PersistType.All)
            print("--> Feature values have been saved to '%s'" % settings_file)

            # Restore settings to initial value.
            try:
                cam.UserSetSelector.set('Default')

            except (AttributeError, VimbaFeatureError):
                abort('Failed to set Feature \'UserSetSelector\'')

            try:
                cam.UserSetLoad.run()
                print("--> All feature values have been restored to default")

            except (AttributeError, VimbaFeatureError):
                abort('Failed to run Feature \'UserSetLoad\'')

            # Load camera settings from file.
            cam.load_settings(settings_file, PersistType.All)
            print("--> Feature values have been loaded from given file '%s'" % settings_file)



# Camera Information
def print_camera(cam: Camera):
    print('/// Camera Name   : {}'.format(cam.get_name()))
    print('/// Model Name    : {}'.format(cam.get_model()))
    print('/// Camera ID     : {}'.format(cam.get_id()))
    print('/// Serial Number : {}'.format(cam.get_serial()))
    print('/// Interface ID  : {}\n'.format(cam.get_interface_id()))



# Set exposure time
with Vimba.get_instance () as vimba:
    cams = vimba.get_all_cameras ()
    with cams [0] as cam:
        exposure_time = cam.ExposureTime

        time = exposure_time.get()
        inc = exposure_time.get_increment ()

        exposure_time.set(time + inc)

            # Capture single Frame and print all contained ancillary data
            frame = cam.get_frame()
            anc_data = frame.get_ancillary_data()
            if anc_data:
                with anc_data:
                    print('Print ancillary data contained in Frame:')

                    for feat in anc_data.get_all_features():
                        print('Feature Name   : {}'.format(feat.get_name()))
                        print('Display Name   : {}'.format(feat.get_display_name()))
                        print('Tooltip        : {}'.format(feat.get_tooltip()))
                        print('Description    : {}'.format(feat.get_description()))
                        print('SFNC Namespace : {}'.format(feat.get_sfnc_namespace()))
                        print('Value          : {}'.format(feat.get()))
                        print()

            else:
                abort('Frame {} does not contain AncillaryData. Abort'.format(frame.get_id()))

# Get camera features
            print('Print all features of camera \'{}\':'.format(cam.get_id()))
            for feature in cam.get_all_features():
                print_feature(feature)
